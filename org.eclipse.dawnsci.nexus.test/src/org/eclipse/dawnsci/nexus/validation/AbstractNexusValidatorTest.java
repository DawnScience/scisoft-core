/*-
 * Copyright 2015 Diamond Light Source Ltd.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.eclipse.dawnsci.nexus.validation;

import static org.eclipse.dawnsci.nexus.validation.AbstractNexusValidator.ATTRIBUTE_NAME_UNITS;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.is;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.dawnsci.analysis.api.tree.Attribute;
import org.eclipse.dawnsci.analysis.api.tree.DataNode;
import org.eclipse.dawnsci.analysis.api.tree.GroupNode;
import org.eclipse.dawnsci.analysis.tree.TreeFactory;
import org.eclipse.dawnsci.nexus.NXdetector;
import org.eclipse.dawnsci.nexus.NXentry;
import org.eclipse.dawnsci.nexus.NXinstrument;
import org.eclipse.dawnsci.nexus.NXsample;
import org.eclipse.dawnsci.nexus.NXtransformations;
import org.eclipse.dawnsci.nexus.NexusNodeFactory;
import org.eclipse.dawnsci.nexus.validation.ValidationReportEntry.Level;
import org.eclipse.dawnsci.nexus.validation.ValidationReportEntry.NodeType;
import org.eclipse.january.dataset.DatasetFactory;
import org.eclipse.january.dataset.DoubleDataset;
import org.eclipse.january.dataset.IDataset;
import org.eclipse.january.dataset.IntegerDataset;
import org.eclipse.january.dataset.StringDataset;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This class is a unit test for the methods in {@link AbstractNexusValidator} that are
 * called by the autogenerated subclass of that class for each NXDL application definition.
 */
public class AbstractNexusValidatorTest {
	
	/**
	 * The validator to test. We're testing the method defined in the abstract superclass
	 * of the validators created for each NeXus base class.
	 */
	private AbstractNexusValidator validator;
	
	@Before
	public void setUp() {
		validator = new NXtomoValidator();
	}
	
	@After
	public void tearDown() {
		validator = null;
	}
	
	@Test
	public void testAddValidationEntry() throws Exception {
		validator.addValidationEntry(Level.ERROR, NodeType.DATA_NODE, "fieldName", "message");
		final ValidationReport report = validator.getValidationReport();
		assertThat(report.isOk(), is(false));
		assertThat(report.getValidationEntries(), contains(new ValidationReportEntry(
				Level.ERROR, NodeType.DATA_NODE, "fieldName", "message")));
	}
	
	@Test
	public void testValidateConditionTrue() throws Exception {
		validator.validate(true, Level.ERROR, NodeType.DATA_NODE, "fieldName", "message");
		final ValidationReport report = validator.getValidationReport();
		assertThat(report.isOk(), is(true));
		assertThat(report.getValidationEntries(), is(empty()));
	}
	
	@Test
	public void testValidateConditionFalse() throws Exception {
		validator.validate(true, Level.ERROR, NodeType.DATA_NODE, "fieldName", "message");
		validator.addValidationEntry(Level.ERROR, NodeType.DATA_NODE, "fieldName", "message");
		final ValidationReport report = validator.getValidationReport();
		assertThat(report.isOk(), is(false));
		assertThat(report.getValidationEntries(), contains(new ValidationReportEntry(
				Level.ERROR, NodeType.DATA_NODE, "fieldName", "message")));
	}
	
	@Test
	public void testValidateGroupNotNull_nonNullGroup() throws Exception {
		final GroupNode group = TreeFactory.createGroupNode(1);
		validator.validateGroupNotNull("groupName", NXsample.class, group);
	}
	
	@Test
	public void testValidateGroupNotNull_nullGroup() {
		validator.validateGroupNotNull("groupName", NXsample.class, null);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateUnnamedGroup_required_ok() {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		parentGroup.setSample(NexusNodeFactory.createNXsample());
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, false);
	}
	
	@Test
	public void testValidateUnnamedGroup_required_notPresent() {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, false);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}

	public void testValidateUnnamedGroup_multiple_nonePresent() {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, true);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateUnnamedGroup_multiple_onePresent() {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		parentGroup.setSample(NexusNodeFactory.createNXsample());
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, true);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateUnnamedGroup_multiple_ok() {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		parentGroup.setSample("sample1", NexusNodeFactory.createNXsample());
		parentGroup.setSample("sample2", NexusNodeFactory.createNXsample());
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, true);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateUnnamedGroup_nonMultiple_multiplePresent() throws Exception {
		final NXentry parentGroup = NexusNodeFactory.createNXentry();
		parentGroup.setSample("sample1", NexusNodeFactory.createNXsample());
		parentGroup.setSample("sample2", NexusNodeFactory.createNXsample());
		validator.validateUnnamedGroupOccurrences(parentGroup, NXsample.class, false, false);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldNotNull_ok() {
		IDataset dataset = DatasetFactory.zeros(IntegerDataset.class, null);
		validator.validateFieldNotNull("fieldName", dataset);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateFieldNotNull_nullField() {
		validator.validateFieldNotNull("fieldName", null);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateAttributeNotNull_ok() {
		Attribute attribute = TreeFactory.createAttribute("attributeName");
		attribute.setValue("hello");
		validator.validateAttributeNotNull("attributeName", attribute);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateAttributeNotNull_null() {
		validator.validateAttributeNotNull("attributeName", null);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldEnumeration_ok() {
		StringDataset dataset = DatasetFactory.zeros(StringDataset.class, 1);
		dataset.set("foo", 0);
		validator.validateFieldEnumeration("enumField", dataset, "foo", "bar");
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateFieldEnumeration_illegalRank() {
		StringDataset dataset = DatasetFactory.zeros(StringDataset.class, 3, 3);
		dataset.set("foo", 0, 0);
		validator.validateFieldEnumeration("enumField", dataset, "foo", "bar");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldEnumeration_illegalSize() {
		StringDataset dataset = DatasetFactory.zeros(StringDataset.class, 2);
		dataset.set("foo", 0);
		validator.validateFieldEnumeration("enumField", dataset, "foo", "bar");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldEnumeration_illegalValue() {
		StringDataset dataset = DatasetFactory.zeros(StringDataset.class, 2);
		dataset.set("banana", 0);
		validator.validateFieldEnumeration("enumField", dataset, "foo", "bar");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldType_ok() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10);
		validator.validateFieldType("doubleField", dataset, NexusDataType.NX_FLOAT);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateFieldType_incompatibleType() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10);
		validator.validateFieldType("doubleField", dataset, NexusDataType.NX_CHAR);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldUnits_ok() {
		final DataNode dataNode = NexusNodeFactory.createDataNode();
		dataNode.addAttribute(TreeFactory.createAttribute(ATTRIBUTE_NAME_UNITS, "mm"));
		dataNode.setDataset(DatasetFactory.zeros(DoubleDataset.class, 10));
		validator.validateFieldUnits("distance", dataNode, NexusUnitCategory.NX_LENGTH);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateFieldUnits_attributeNotPreset() {
		final DataNode dataNode = NexusNodeFactory.createDataNode();
		dataNode.setDataset(DatasetFactory.zeros(DoubleDataset.class, 10));
		validator.validateFieldUnits("distance", dataNode, NexusUnitCategory.NX_LENGTH);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldUnits_invalidUnits() {
		final DataNode dataNode = NexusNodeFactory.createDataNode();
		dataNode.setDataset(DatasetFactory.zeros(DoubleDataset.class, 10));
		dataNode.addAttribute(TreeFactory.createAttribute(ATTRIBUTE_NAME_UNITS, "blah"));
		validator.validateFieldUnits("distance", dataNode, NexusUnitCategory.NX_LENGTH);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateFieldUnits_incompatibleUnits() {
		final DataNode dataNode = NexusNodeFactory.createDataNode();
		dataNode.setDataset(DatasetFactory.zeros(DoubleDataset.class, 10));
		dataNode.addAttribute(TreeFactory.createAttribute(ATTRIBUTE_NAME_UNITS, "s"));
		validator.validateFieldUnits("distance", dataNode, NexusUnitCategory.NX_LENGTH);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateRank_ok() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10, 20, 30);
		validator.validateFieldRank("rankField", dataset, 3);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateRank_incorrectRank() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10, 20);
		validator.validateFieldRank("rankField", dataset, 3);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateDimensions_integers_ok() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10, 20, 30);
		validator.validateFieldDimensions("rankField", dataset, null, 10, 20, 30);
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateDimensions_integers_incorrect() {
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, 10, 20, 30);
		validator.validateFieldDimensions("rankField", dataset, null, 10, 20, 40);
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateDimensionsPlaceholders_oneDataset_ok() {
		int size = 10;
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, size, size);
		validator.validateFieldDimensions("field", dataset, null, "size", "size");
		assertThat(validator.getValidationReport().isOk(), is(true));
	}
	
	@Test
	public void testValidateDimensionsPlaceholders_oneDataset_yDimensionWrongSize() {
		int size = 10;
		IDataset dataset = DatasetFactory.zeros(DoubleDataset.class, size, size + 1);
		validator.validateFieldDimensions("field", dataset, null, "size", "size");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateDimensions_multipleDatasets_ok() {
		int xDim = 10;
		int yDim = 20;
		IDataset dataset1 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim);
		validator.validateFieldDimensions("field1", dataset1, null, "xDim", "yDim"); 
		IDataset dataset2 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim);
		validator.validateFieldDimensions("field2", dataset2, null, "xDim", "yDim"); 
	}
	
	@Test
	public void testValidateDimensions_multipleDatasets_incorrect() {
		int xDim = 10;
		int yDim = 20;
		IDataset dataset1 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim);
		validator.validateFieldDimensions("field1", dataset1, null, "xDim", "yDim");
		IDataset dataset2 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim + 1);
		validator.validateFieldDimensions("field2", dataset2, null, "xDim", "yDim");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateDimensions_localGroup() {
		int xDim = 10;
		int yDim = 20;
		IDataset dataset1 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim);
		validator.validateFieldDimensions("field1", dataset1, "group1", "xDim", "yDim"); 
		IDataset dataset2 = DatasetFactory.zeros(DoubleDataset.class, xDim, yDim);
		validator.validateFieldDimensions("field2", dataset2, "group1", "xDim", "yDim");
		
		// clear the group placeholders
		validator.clearLocalGroupDimensionPlaceholderValues();
		IDataset newGroupDataset = DatasetFactory.zeros(DoubleDataset.class, 3, 4);
		validator.validateFieldDimensions("newGroupField", newGroupDataset, "group2", "xDim", "yDim");
	}
	
	private DataNode createDataNodeForLink() {
		final NXentry entry = NexusNodeFactory.createNXentry();
		validator.setEntry(entry);
		final NXinstrument instrument = NexusNodeFactory.createNXinstrument();
		entry.setInstrument(instrument);
		instrument.setPositioner("x", NexusNodeFactory.createNXpositioner());
		instrument.setPositioner("y", NexusNodeFactory.createNXpositioner());
		final NXdetector detector = NexusNodeFactory.createNXdetector();
		instrument.setDetector(detector);
		final DataNode data = NexusNodeFactory.createDataNode();
		detector.addDataNode(NXdetector.NX_DATA, data);
		return data;
	}
	
	@Test
	public void testValidateLink_ok() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/NXdetector/data");
	}

	@Test
	public void testValidateLink_wrongNexusClass() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/detector:NXpositioner/data");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateLink_noSuchGroupNodeName() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/detector2/data");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateLink_noSuchGroupNodeClass() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/NXmirror/data");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateLink_ambiguousGroupPath() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/NXpositioner/data");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateLink_noSuchDataNode() throws Exception {
		final DataNode data = createDataNodeForLink();
		validator.validateDataNodeLink(NXdetector.NX_DATA, data, "/NXentry/NXinstrument/NXdetector/noData");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateTransformations() throws Exception {
		final Map<String, NXtransformations> transformations = new HashMap<>();
		
		transformations.put("one", NexusNodeFactory.createNXtransformations());
		transformations.put("two", NexusNodeFactory.createNXtransformations());
		transformations.put("three", NexusNodeFactory.createNXtransformations());
		
		transformations.get("one").addAttribute(TreeFactory.createAttribute("depends_on", "two"));
		transformations.get("two").addAttribute(TreeFactory.createAttribute("depends_on", "three"));
		transformations.get("three").addAttribute(TreeFactory.createAttribute("depends_on", "."));
		
		validator.validateTransformations(transformations, "one");
	}
	
	@Test
	public void testValidateTransformations_missingFirstTransformation() {
		final Map<String, NXtransformations> transformations = new HashMap<>();
		
		transformations.put("one", NexusNodeFactory.createNXtransformations());
		transformations.put("two", NexusNodeFactory.createNXtransformations());
		transformations.put("three", NexusNodeFactory.createNXtransformations());
		
		transformations.get("one").addAttribute(TreeFactory.createAttribute("depends_on", "two"));
		transformations.get("two").addAttribute(TreeFactory.createAttribute("depends_on", "three"));
		transformations.get("three").addAttribute(TreeFactory.createAttribute("depends_on", "."));
		
		validator.validateTransformations(transformations, "four");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateTransformations_missingTransformation() throws Exception {
		final Map<String, NXtransformations> transformations = new HashMap<>();
		
		transformations.put("one", NexusNodeFactory.createNXtransformations());
		transformations.put("two", NexusNodeFactory.createNXtransformations());
		transformations.put("three", NexusNodeFactory.createNXtransformations());
		
		transformations.get("one").addAttribute(TreeFactory.createAttribute("depends_on", "two"));
		transformations.get("two").addAttribute(TreeFactory.createAttribute("depends_on", "three"));
		transformations.get("three").addAttribute(TreeFactory.createAttribute("depends_on", "four"));
		
		validator.validateTransformations(transformations, "one");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}
	
	@Test
	public void testValidateTransformations_circularDependency() throws Exception {
		final Map<String, NXtransformations> transformations = new HashMap<>();
		
		transformations.put("one", NexusNodeFactory.createNXtransformations());
		transformations.put("two", NexusNodeFactory.createNXtransformations());
		transformations.put("three", NexusNodeFactory.createNXtransformations());
		
		transformations.get("one").addAttribute(TreeFactory.createAttribute("depends_on", "two"));
		transformations.get("two").addAttribute(TreeFactory.createAttribute("depends_on", "three"));
		transformations.get("three").addAttribute(TreeFactory.createAttribute("depends_on", "one"));
		
		validator.validateTransformations(transformations, "one");
		assertThat(validator.getValidationReport().isOk(), is(false));
	}

}
